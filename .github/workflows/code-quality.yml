name: Code Quality

on:
  push:
    branches: [ dev ]
    paths:
      - '**.py'
      - 'pyproject.toml'
      - 'poetry.lock'
      - '.github/workflows/code-quality.yml'
  pull_request:
    branches: [ main, dev ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      # Cache Poetry's installation
      - name: Cache Poetry installation
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: poetry-local-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      
      # Cache the poetry virtual environment
      - name: Cache poetry virtual environment
        uses: actions/cache@v3
        id: cache-venv
        with:
          path: .venv
          key: venv-lint-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      
      - name: Install dependencies
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          poetry install --with dev --no-interaction
      
      # Cache Ruff results to speed up future runs
      - name: Cache Ruff results
        uses: actions/cache@v3
        with:
          path: ~/.cache/ruff
          key: ruff-${{ runner.os }}-${{ hashFiles('**/*.py') }}-${{ github.sha }}
          restore-keys: |
            ruff-${{ runner.os }}-${{ hashFiles('**/*.py') }}-
            ruff-${{ runner.os }}-
      
      - name: Run Ruff linter
        run: poetry run ruff check .
      
      - name: Run Ruff formatter
        run: poetry run ruff format --check .
      
      - name: Check import sorting
        run: poetry run ruff check --select=I .


